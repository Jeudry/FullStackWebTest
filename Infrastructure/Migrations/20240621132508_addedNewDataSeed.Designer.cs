// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240621132508_addedNewDataSeed")]
    partial class addedNewDataSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("AppDb")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Product.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products", "AppDb");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743743"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3620),
                            Description = "Its a chair to sit",
                            Name = "Chair",
                            Price = 100.0,
                            Stock = 10
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743744"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3640),
                            Description = "Its a table to put things on",
                            Name = "Table",
                            Price = 200.0,
                            Stock = 20
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743745"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Its a sofa to sit",
                            Name = "Sofa",
                            Price = 300.0,
                            Stock = 30
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743746"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Its a bed to sleep",
                            Name = "Bed",
                            Price = 400.0,
                            Stock = 40
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743747"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Its a lamp to light",
                            Name = "Lamp",
                            Price = 500.0,
                            Stock = 50
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743748"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Its a curtain to cover",
                            Name = "Curtains",
                            Price = 600.0,
                            Stock = 60
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743749"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3650),
                            Description = "Its a carpet to walk",
                            Name = "Carpet",
                            Price = 700.0,
                            Stock = 70
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743750"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Its a painting to see",
                            Name = "Painting",
                            Price = 800.0,
                            Stock = 80
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743751"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Its a mirror to reflect",
                            Name = "Mirror",
                            Price = 900.0,
                            Stock = 90
                        },
                        new
                        {
                            Id = new Guid("dc043262-673a-491a-b811-446703743752"),
                            CreatedAt = new DateTime(2024, 6, 21, 13, 25, 7, 836, DateTimeKind.Utc).AddTicks(3660),
                            Description = "Its a vase to hold",
                            Name = "Vase",
                            Price = 1000.0,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("Domain.User.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "AppDb");

                    b.HasData(
                        new
                        {
                            Id = "dc043262-673a-491a-b811-446703743743",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "66f396db-fcf3-4001-99e4-2f608b5bc27b",
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAELniJoL4XB9zJP3Lw3nPrcbnpJATDgi3ednHR/XA6X5y8H/+VFxG8fqm/SuFobK3dg==",
                            PhoneNumber = "18497505944",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "00c53988-e683-4881-8246-712ed05e49d6",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "dc043262-673a-491a-b811-446703743744",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b4627c97-6463-4653-8a2f-e566d721cd73",
                            Email = "user@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEK7f7ykX61lD01YigVD9Z5ijhdjYXowqM9kmOn8kmlPbDa/2eTQtATN/Td310DrVfQ==",
                            PhoneNumber = "18497505945",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "11830716-3b3e-4714-91e1-be31bd5aea39",
                            TwoFactorEnabled = false,
                            UserName = "User"
                        },
                        new
                        {
                            Id = "dc043262-673a-491a-b811-446703743745",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fdea4919-ce4a-4e54-8078-1d03076d9a8f",
                            Email = "admin2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@EXAMPLE.COM",
                            NormalizedUserName = "ADMIN2",
                            PasswordHash = "AQAAAAIAAYagAAAAEOP3lZM5Pw8NG5WjNcM6EllaviC0JH8oEDwqJZgosEKobDpPEUHznYtALMrIShYfdw==",
                            PhoneNumber = "18497505936",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "7b50bc0a-1b4c-4584-8ef9-30c953d955fa",
                            TwoFactorEnabled = false,
                            UserName = "Admin2"
                        },
                        new
                        {
                            Id = "dc043262-673a-491a-b811-446703743746",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec09ead2-4799-404e-a89b-3695435cf25b",
                            Email = "user2@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@EXAMPLE.COM",
                            NormalizedUserName = "USER2",
                            PasswordHash = "AQAAAAIAAYagAAAAEOjhE85YpTpXiDEfh+TB2FrT86lPFh+IbHt67G3HUPCqNgT1vcyi8B+e41tWfG6Gpg==",
                            PhoneNumber = "18497505937",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "042101a4-9b35-479d-bcc3-5fc45147266e",
                            TwoFactorEnabled = false,
                            UserName = "User2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "AppDb");

                    b.HasData(
                        new
                        {
                            Id = "dc043262-673a-491a-b811-446703743744",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "dc043262-673a-491a-b811-446703743743",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "AppDb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "AppDb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "AppDb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "AppDb");

                    b.HasData(
                        new
                        {
                            UserId = "dc043262-673a-491a-b811-446703743743",
                            RoleId = "dc043262-673a-491a-b811-446703743743"
                        },
                        new
                        {
                            UserId = "dc043262-673a-491a-b811-446703743744",
                            RoleId = "dc043262-673a-491a-b811-446703743744"
                        },
                        new
                        {
                            UserId = "dc043262-673a-491a-b811-446703743745",
                            RoleId = "dc043262-673a-491a-b811-446703743744"
                        },
                        new
                        {
                            UserId = "dc043262-673a-491a-b811-446703743746",
                            RoleId = "dc043262-673a-491a-b811-446703743743"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "AppDb");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.User.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
